src/graph-json.c:87:      *pzValue = sqlite3_malloc(nLen + 1);
src/graph-advanced.c:62:  pStackNode = sqlite3_malloc(sizeof(*pStackNode));
src/graph-advanced.c:121:      char **azNew = sqlite3_realloc(pState->azSCC, 
src/graph-advanced.c:159:  state.aIndex = sqlite3_malloc(sizeof(int) * nNodes);
src/graph-advanced.c:160:  state.aLowLink = sqlite3_malloc(sizeof(int) * nNodes);
src/graph-advanced.c:161:  state.aOnStack = sqlite3_malloc(sizeof(int) * nNodes);
src/graph-algo.c:55:** Memory allocation: Uses sqlite3_malloc() for initial capacity.
src/graph-algo.c:61:  pQueue = sqlite3_malloc(sizeof(*pQueue));
src/graph-algo.c:70:  pQueue->aNodes = sqlite3_malloc(pQueue->nAlloc * sizeof(PQNode));
src/graph-algo.c:168:    aNew = sqlite3_realloc(pQueue->aNodes, nNewAlloc * sizeof(PQNode));
src/graph-algo.c:251:  pMap = sqlite3_malloc(sizeof(*pMap));
src/graph-algo.c:259:  pMap->aBuckets = sqlite3_malloc(pMap->nBuckets * sizeof(DistanceInfo*));
src/graph-algo.c:312:  pInfo = sqlite3_malloc(sizeof(*pInfo));
src/graph-algo.c:365:** Memory allocation: Uses sqlite3_malloc() for distance map and heap.
src/graph-algo.c:470:      aPath = sqlite3_malloc(nPath * sizeof(sqlite3_int64));
src/graph-algo.c:575:  aPageRank = sqlite3_malloc(sizeof(double) * (nNodes + 1));
src/graph-algo.c:576:  aNewPageRank = sqlite3_malloc(sizeof(double) * (nNodes + 1));
src/graph-algo.c:577:  aOutDegree = sqlite3_malloc(sizeof(int) * (nNodes + 1));
src/graph-cache.c:128:    g_planCache = sqlite3_malloc(sizeof(PlanCache));
src/graph-cache.c:142:    g_planCache->buckets = sqlite3_malloc(
src/graph-cache.c:283:    PlanCacheEntry *entry = sqlite3_malloc(sizeof(PlanCacheEntry));
src/graph-parallel.c:115:    TaskScheduler *scheduler = sqlite3_malloc(sizeof(TaskScheduler));
src/graph-parallel.c:126:    scheduler->queues = sqlite3_malloc(nThreads * sizeof(ParallelTask*));
src/graph-parallel.c:138:        g_threadPool.workers = sqlite3_malloc(nThreads * sizeof(WorkerContext));
src/graph-parallel.c:208:        ParallelTask *task = sqlite3_malloc(sizeof(ParallelTask));
src/graph-parallel.c:338:    sqlite3_int64 *results = sqlite3_malloc(1000 * sizeof(sqlite3_int64));
src/graph-parallel.c:357:    ParallelPatternMatch *matches = sqlite3_malloc(
src/graph-parallel.c:368:    void **args = sqlite3_malloc(nThreads * sizeof(void*));
src/graph-compress.c:87:    g_stringDict = sqlite3_malloc(sizeof(StringDictionary));
src/graph-compress.c:95:    g_stringDict->buckets = sqlite3_malloc(
src/graph-compress.c:136:    entry = sqlite3_malloc(sizeof(DictEntry));
src/graph-compress.c:143:    entry->zValue = sqlite3_malloc(len + 1);
src/graph-compress.c:209:    char *compressed = sqlite3_malloc(strlen(zProperties) + 100);
src/graph-compress.c:226:                char *value = sqlite3_malloc(len + 1);
src/graph-compress.c:271:    char *decompressed = sqlite3_malloc(strlen(zCompressed) * 2);
src/graph-compress.c:319:    unsigned char *compressed = sqlite3_malloc(destLen + 16);
src/graph-compress.c:367:    unsigned char *decompressed = sqlite3_malloc(destLen);
src/graph-performance.c:154:    JoinInfo *joins = sqlite3_malloc(optimizer->nJoins * sizeof(JoinInfo));
src/graph-performance.c:218:    QueryMemoryPool *pool = sqlite3_malloc(sizeof(QueryMemoryPool));
src/graph-performance.c:222:    pool->basePtr = sqlite3_malloc(initialSize);
src/graph-performance.c:230:    pool->allocations = sqlite3_malloc(100 * sizeof(void*));
src/graph-performance.c:254:        return sqlite3_malloc(size);
src/graph-performance.c:300:    PerfMetrics *metrics = sqlite3_malloc(sizeof(PerfMetrics));
src/graph-performance.c:337:    char *result = sqlite3_malloc(512);
src/graph-performance.c:388:    CompositeIndex *index = sqlite3_malloc(sizeof(CompositeIndex));
src/graph-performance.c:403:    index->properties = sqlite3_malloc(nProperties * sizeof(char*));
src/graph-performance.c:431:    CSRGraph *csr = sqlite3_malloc(sizeof(CSRGraph));
src/graph-performance.c:459:    csr->rowOffsets = sqlite3_malloc((csr->nNodes + 1) * sizeof(sqlite3_int64));
src/graph-performance.c:460:    csr->columnIndices = sqlite3_malloc(csr->nEdges * sizeof(sqlite3_int64));
src/graph-performance.c:461:    csr->edgeWeights = sqlite3_malloc(csr->nEdges * sizeof(double));
src/graph-benchmark.c:167:    BenchmarkResult *result = sqlite3_malloc(sizeof(BenchmarkResult));
src/graph-benchmark.c:185:    double *times = sqlite3_malloc(config->measureRuns * sizeof(double));
src/graph-benchmark.c:238:    BenchmarkResult *result = sqlite3_malloc(sizeof(BenchmarkResult));
src/graph-benchmark.c:295:    BenchmarkResult **results = sqlite3_malloc(10 * sizeof(BenchmarkResult*));
src/graph-enhanced.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/graph-tvf.c:149:  pNew = sqlite3_malloc(sizeof(*pNew));
src/graph-tvf.c:251:  pCur = sqlite3_malloc(sizeof(*pCur));
src/graph-tvf.c:308:      aNew = sqlite3_realloc(aIds, nAlloc * sizeof(sqlite3_int64));
src/cypher/cypher-iterators.c:15:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-iterators.c:31:** Returns a malloc'd string that caller must free, or NULL if not found.
src/cypher/cypher-iterators.c:175:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:178:  pData = sqlite3_malloc(sizeof(AllNodesScanData));
src/cypher/cypher-iterators.c:272:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:275:  pData = sqlite3_malloc(sizeof(LabelIndexScanData));
src/cypher/cypher-iterators.c:380:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:383:  pData = sqlite3_malloc(sizeof(PropertyIndexScanData));
src/cypher/cypher-iterators.c:468:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:471:  pData = sqlite3_malloc(sizeof(FilterIteratorData));
src/cypher/cypher-iterators.c:582:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:585:  pData = sqlite3_malloc(sizeof(ProjectionIteratorData));
src/cypher/cypher-iterators.c:645:      CypherResult *aNew = sqlite3_realloc(pData->aResults, nNew * sizeof(CypherResult));
src/cypher/cypher-iterators.c:726:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:729:  pData = sqlite3_malloc(sizeof(SortIteratorData));
src/cypher/cypher-iterators.c:815:  pIterator = sqlite3_malloc(sizeof(CypherIterator));
src/cypher/cypher-iterators.c:818:  pData = sqlite3_malloc(sizeof(LimitIteratorData));
src/cypher/cypher-ast.c:19:  CypherAst *pAst = sqlite3_malloc(sizeof(CypherAst));
src/cypher/cypher-ast.c:27:  pAst->apChildren = sqlite3_malloc(sizeof(CypherAst*) * pAst->nChildrenAlloc);
src/cypher/cypher-ast.c:56:    CypherAst **apNew = sqlite3_realloc(pParent->apChildren, sizeof(CypherAst*) * nNewMax);
src/cypher/cypher-json.c:12:** - Memory management using sqlite3_malloc/free
src/cypher/cypher-json.c:15:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-json.c:108:        zKey = sqlite3_malloc(keyLen + 1);
src/cypher/cypher-json.c:148:            char *zValue = sqlite3_malloc(valueLen + 1);
src/cypher/cypher-json.c:173:                char *zValue = sqlite3_malloc(valueLen + 1);
src/cypher/cypher-json.c:191:                char *zValue = sqlite3_malloc(valueLen + 1);
src/cypher/cypher-json.c:231:            char **azNewKeys = sqlite3_realloc(azKeys, nNewAlloc * sizeof(char*));
src/cypher/cypher-json.c:240:            CypherValue *apNewValues = sqlite3_realloc(apValues, nNewAlloc * sizeof(CypherValue));
src/cypher/cypher-json.c:323:            char *zResult = sqlite3_malloc(nAlloc);
src/cypher/cypher-storage.c:16:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-storage.c:65:        zLabelsJson = sqlite3_malloc(nAlloc);
src/cypher/cypher-storage.c:80:                char *zNew = sqlite3_realloc(zLabelsJson, nAlloc);
src/cypher/cypher-storage.c:496:    char *zResult = sqlite3_malloc(nAlloc);
src/cypher/cypher-parser.c:80:    CypherParser *pParser = (CypherParser *)malloc(sizeof(CypherParser));
src/cypher/cypher-parser.c:121:    pParser->zErrorMsg = (char *)malloc(size + 256); // Add extra space for token info
src/cypher/cypher-expressions.c:37:    pExpr = sqlite3_malloc(sizeof(CypherExpression));
src/cypher/cypher-expressions.c:348:        aValues = sqlite3_malloc(sizeof(CypherValue) * nArgs);
src/cypher/cypher-expressions.c:484:    zOutput = sqlite3_malloc(nLen + 1);
src/cypher/cypher-expressions.c:517:    zOutput = sqlite3_malloc(nLen + 1);
src/cypher/cypher-planner.c:15:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-planner.c:39:  pPlanner = sqlite3_malloc(sizeof(CypherPlanner));
src/cypher/cypher-planner.c:46:  pPlanner->pContext = sqlite3_malloc(sizeof(PlanContext));
src/cypher/cypher-planner.c:119:    azNew = sqlite3_realloc(pContext->azVariables, nNew * sizeof(char*));
src/cypher/cypher-planner.c:123:    apNew = sqlite3_realloc(pContext->apVarNodes, nNew * sizeof(LogicalPlanNode*));
src/cypher/cypher-lexer.c:26:    CypherLexer *pLexer = (CypherLexer *)malloc(sizeof(CypherLexer));
src/cypher/cypher-lexer.c:100:    CypherToken *pToken = (CypherToken *)malloc(sizeof(CypherToken));
src/cypher/cypher-lexer.c:135:    pLexer->zErrorMsg = (char *)malloc(size + 1);
src/cypher/cypher-execution-context.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-execution-context.c:35:  pContext = sqlite3_malloc(sizeof(ExecutionContext));
src/cypher/cypher-execution-context.c:97:    azNew = sqlite3_realloc(pContext->azVariables, nNew * sizeof(char*));
src/cypher/cypher-execution-context.c:101:    aNew = sqlite3_realloc(pContext->aBindings, nNew * sizeof(CypherValue));
src/cypher/cypher-execution-context.c:143:  pValue = sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-execution-context.c:241:        pCopy->u.list.apValues = sqlite3_malloc(pValue->u.list.nValues * sizeof(CypherValue));
src/cypher/cypher-execution-context.c:274:** Makes a copy of the string using sqlite3_malloc().
src/cypher/cypher-execution-context.c:408:  pResult = sqlite3_malloc(sizeof(CypherResult));
src/cypher/cypher-execution-context.c:448:    azNew = sqlite3_realloc(pResult->azColumnNames, nNew * sizeof(char*));
src/cypher/cypher-execution-context.c:452:    aNew = sqlite3_realloc(pResult->aValues, nNew * sizeof(CypherValue));
src/cypher/cypher-execution-context.c:654:  zResult = sqlite3_malloc(nAlloc);
src/cypher/cypher-execution-context.c:676:      char *zNew = sqlite3_realloc(zResult, nAlloc);
src/cypher/cypher-execution-context.c:711:  char *zIndent = sqlite3_malloc(nIndent + 1);
src/cypher/cypher-execution-context.c:722:  zResult = sqlite3_malloc(nAlloc);
src/cypher/cypher-execution-context.c:757:      char *zNewResult = sqlite3_realloc(zResult, nAlloc);
src/cypher/cypher-execution-context.c:796:      char *zResult = sqlite3_malloc(256);
src/cypher/cypher-execution-context.c:802:        char *zIndent = sqlite3_malloc(nIndent + 3);
src/cypher/cypher-execution-context.c:809:          zResult = sqlite3_realloc(zResult, nUsed + nNeeded + 100);
src/cypher/cypher-execution-context.c:820:      char *zIndent = sqlite3_malloc(nIndent + 1);
src/cypher/cypher-write.c:8:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-write.c:193:    char *zSanitized = sqlite3_malloc(nLen * 2 + 1); /* Worst case: all chars escaped */
src/cypher/cypher-write.c:284:    pCtx = (CypherWriteContext*)sqlite3_malloc(sizeof(CypherWriteContext));
src/cypher/cypher-write.c:534:        char *zLabels = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:552:                char *zNew = sqlite3_realloc(zLabels, nAlloc);
src/cypher/cypher-write.c:571:            char *zNew = sqlite3_realloc(zLabels, nUsed + 3);
src/cypher/cypher-write.c:590:        char *zProps = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:646:                char *zNew = sqlite3_realloc(zProps, nAlloc);
src/cypher/cypher-write.c:699:            char *zNew = sqlite3_realloc(zProps, nUsed + 3);
src/cypher/cypher-write.c:746:    pWriteOp->pNewValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-write.c:900:        char *zProps = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:932:                char *zNew = sqlite3_realloc(zProps, nAlloc);
src/cypher/cypher-write.c:1221:    zResult = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:1247:                char *zNew = sqlite3_realloc(zResult, nAlloc);
src/cypher/cypher-write.c:1518:    CypherWriteOp *pOp = (CypherWriteOp*)sqlite3_malloc(sizeof(CypherWriteOp));
src/cypher/cypher-write.c:1561:    CreateNodeOp *pOp = (CreateNodeOp*)sqlite3_malloc(sizeof(CreateNodeOp));
src/cypher/cypher-write.c:1602:    CreateRelOp *pOp = (CreateRelOp*)sqlite3_malloc(sizeof(CreateRelOp));
src/cypher/cypher-write.c:1702:            char *zLabels = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:1711:                    char *zNew = sqlite3_realloc(zLabels, nAlloc);
src/cypher/cypher-write.c:1734:        char *zProps = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:1764:                char *zNew = sqlite3_realloc(zProps, nAlloc);
src/cypher/cypher-write.c:1813:                char *zNew = sqlite3_realloc(zProps, nAlloc);
src/cypher/cypher-write.c:1912:    pIterator = (CypherWriteIterator*)sqlite3_malloc(sizeof(CypherWriteIterator));
src/cypher/cypher-write.c:1930:    MergeNodeOp *pOp = (MergeNodeOp*)sqlite3_malloc(sizeof(MergeNodeOp));
src/cypher/cypher-write.c:2013:    pWriteOp->pOldValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-write.c:2051:    pWriteOp->pNewValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-write.c:2108:        char *zLabels = sqlite3_malloc(nAlloc);
src/cypher/cypher-write.c:2117:                char *zNew = sqlite3_realloc(zLabels, nAlloc);
src/cypher/cypher-write.c:2219:    pIterator = (CypherWriteIterator*)sqlite3_malloc(sizeof(CypherWriteIterator));
src/cypher/cypher-write.c:2238:    pIterator = (CypherWriteIterator*)sqlite3_malloc(sizeof(CypherWriteIterator));
src/cypher/cypher-write.c:2249:    SetPropertyOp *pOp = (SetPropertyOp*)sqlite3_malloc(sizeof(SetPropertyOp));
src/cypher/cypher-write.c:2270:    SetLabelOp *pOp = (SetLabelOp*)sqlite3_malloc(sizeof(SetLabelOp));
src/cypher/cypher-write.c:2400:                    pWriteOp->pOldValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-write.c:2445:                    pWriteOp->pOldValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-write.c:2493:    pIterator = (CypherWriteIterator*)sqlite3_malloc(sizeof(CypherWriteIterator));
src/cypher/cypher-write.c:2504:    DeleteOp *pOp = (DeleteOp*)sqlite3_malloc(sizeof(DeleteOp));
src/cypher/cypher-write.c:2527:    pIterator = (CypherWriteIterator*)sqlite3_malloc(sizeof(CypherWriteIterator));
src/cypher/cypher-write.c:2554:    pIterator = (CypherWriteIterator*)sqlite3_malloc(sizeof(CypherWriteIterator));
src/cypher/cypher-executor.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-executor.c:36:  pExecutor = sqlite3_malloc(sizeof(CypherExecutor));
src/cypher/cypher-executor.c:83:    pIterator->apChildren = sqlite3_malloc(pPlan->nChildren * sizeof(CypherIterator*));
src/cypher/cypher-executor.c:153:  zResultArray = sqlite3_malloc(nAllocated);
src/cypher/cypher-executor.c:203:      char *zNew = sqlite3_realloc(zResultArray, nAllocated);
src/cypher/cypher-executor-sql.c:13:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-physical-plan.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-physical-plan.c:34:  pNode = sqlite3_malloc(sizeof(PhysicalPlanNode));
src/cypher/cypher-physical-plan.c:83:    apNew = sqlite3_realloc(pParent->apChildren, 
src/cypher/cypher-logical-plan.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-logical-plan.c:34:  pNode = sqlite3_malloc(sizeof(LogicalPlanNode));
src/cypher/cypher-logical-plan.c:81:    apNew = sqlite3_realloc(pParent->apChildren, 
src/cypher/cypher-logical-plan.c:98:** Makes a copy of the string using sqlite3_malloc().
src/cypher/cypher-sql.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-sql.c:168:  zResult = sqlite3_malloc(nAlloc);
src/cypher/cypher-sql.c:278:      char *zNew = sqlite3_realloc(zResult, nAlloc);
src/cypher/cypher-planner-sql.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-write-sql.c:8:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/cypher/cypher-write-sql.c:555:    pOp->pValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/cypher/cypher-write-sql.c:714:        pSetOp->pValue = (CypherValue*)sqlite3_malloc(sizeof(CypherValue));
src/graph-vtab.c:6:** and memory management using sqlite3_malloc()/sqlite3_free().
src/graph-vtab.c:59:** Memory allocation: Creates new GraphVtab with sqlite3_malloc().
src/graph-vtab.c:77:  pNew = sqlite3_malloc(sizeof(*pNew));
src/graph-vtab.c:159:  pNew = sqlite3_malloc(sizeof(*pNew));
src/graph-vtab.c:294:** Memory allocation: Creates new GraphCursor with sqlite3_malloc().
src/graph-vtab.c:302:  pCursor = sqlite3_malloc(sizeof(*pCursor));
src/graph-traverse.c:24:** SQLite-style memory management with sqlite3_malloc/free.
src/graph-traverse.c:43:** Memory allocation: Uses sqlite3_malloc() for initial capacity.
src/graph-traverse.c:49:  pSet = sqlite3_malloc(sizeof(*pSet));
src/graph-traverse.c:58:  pSet->aNodes = sqlite3_malloc(pSet->nAlloc * sizeof(sqlite3_int64));
src/graph-traverse.c:71:** Grows array as needed using sqlite3_realloc().
src/graph-traverse.c:81:    aNew = sqlite3_realloc(pSet->aNodes, nNewAlloc * sizeof(sqlite3_int64));
src/graph-traverse.c:131:** Memory allocation: Uses sqlite3_malloc() for visited set and path.
src/graph-traverse.c:278:  pDepthInfo = sqlite3_malloc(sizeof(*pDepthInfo));
src/graph-traverse.c:327:        pDepthInfo = sqlite3_malloc(sizeof(*pDepthInfo));
src/graph-schema.c:14:** Memory allocation: All functions use sqlite3_malloc()/sqlite3_free()
src/graph-schema.c:62:  pSchema = sqlite3_malloc(sizeof(CypherSchema));
src/graph-schema.c:68:  pSchema->azNodeLabels = sqlite3_malloc(sizeof(char*) * 16);
src/graph-schema.c:69:  pSchema->azRelTypes = sqlite3_malloc(sizeof(char*) * 16);
src/graph-schema.c:143:    char **azNew = sqlite3_realloc(pSchema->azNodeLabels, 
src/graph-schema.c:173:    char **azNew = sqlite3_realloc(pSchema->azRelTypes, 
src/graph-schema.c:253:  char **azCopy = sqlite3_malloc(sizeof(char*) * nLabels);
src/graph-util.c:6:** memory management using sqlite3_malloc()/sqlite3_free().
src/graph-util.c:25:  Queue *q = sqlite3_malloc(sizeof(Queue));
src/graph-util.c:42:  QueueNode *p = sqlite3_malloc(sizeof(QueueNode));
src/graph.c:82:** Memory allocation: Uses sqlite3_malloc() for any required structures.
src/graph.c:495:  VisitedNode *vNode = sqlite3_malloc(sizeof(VisitedNode));
src/graph.c:501:  sqlite3_int64 *pPredecessor = sqlite3_malloc(sizeof(sqlite3_int64) * (nNodes + 1));
src/graph.c:527:        vNode = sqlite3_malloc(sizeof(VisitedNode));
src/graph.c:624:  double *pRank = sqlite3_malloc(sizeof(double) * (nNodes + 1));
src/graph.c:625:  double *pNextRank = sqlite3_malloc(sizeof(double) * (nNodes + 1));
src/graph.c:626:  int *pOutDegree = sqlite3_malloc(sizeof(int) * (nNodes + 1));
src/graph.c:1039:    pNode = sqlite3_malloc(sizeof(GraphNode));
src/graph.c:1063:    pEdge = sqlite3_malloc(sizeof(GraphEdge));
src/graph-bulk.c:52:    CSVParser *parser = sqlite3_malloc(sizeof(CSVParser));
src/graph-bulk.c:55:    parser->buffer = sqlite3_malloc(size + 1);
src/graph-bulk.c:95:    parser->headers = sqlite3_malloc(nCols * sizeof(char*));
src/graph-bulk.c:109:            parser->headers[col] = sqlite3_malloc(len + 1);
src/graph-bulk.c:132:    char **values = sqlite3_malloc(parser->nColumns * sizeof(char*));
src/graph-bulk.c:152:            values[col] = sqlite3_malloc(len + 1);
src/graph-bulk.c:196:    BatchAccumulator *batch = sqlite3_malloc(sizeof(BatchAccumulator));
src/graph-bulk.c:199:    batch->nodes = sqlite3_malloc(capacity * sizeof(GraphNode*));
src/graph-bulk.c:200:    batch->edges = sqlite3_malloc(capacity * sizeof(GraphEdge*));
src/graph-bulk.c:361:        GraphNode *node = sqlite3_malloc(sizeof(GraphNode));
src/graph-bulk.c:368:                node->azLabels = sqlite3_malloc(sizeof(char*));
src/graph-bulk.c:523:                pGraph = sqlite3_malloc(sizeof(GraphVtab));
