# Main Makefile

# Compiler and flags
CC = gcc
CFLAGS = -I$(CURDIR)/include -I$(CURDIR)/src -I$(CURDIR)/_deps/sqlite-src -I$(CURDIR)/_deps/Unity-2.5.2/src -g -O0 -std=gnu99 -fPIC
LDFLAGS = -lm -ldl -lpthread

# Sanitizer flags when SANITIZE=1
ifeq ($(SANITIZE),1)
    CFLAGS += -fsanitize=address,undefined -Wall -Wextra -Werror
    LDFLAGS += -fsanitize=address,undefined
endif

# Enable SQLite extensions for all builds
CFLAGS += -DSQLITE_ENABLE_LOAD_EXTENSION=1

# Add the SQLite source to the CFLAGS
CFLAGS += -I$(CURDIR)/_deps/sqlite-src

# Directories
BUILD_DIR = build
SRC_DIR = src
TESTS_DIR = tests

.PHONY: all clean test rebuild deps test_tck sanitize

all: deps
	@mkdir -p $(BUILD_DIR)
	$(MAKE) -C $(SRC_DIR) CFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS)"
	$(MAKE) -C $(TESTS_DIR) CFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS)"

deps:
	$(MAKE) -C _deps CFLAGS="$(CFLAGS)"

clean:
	$(MAKE) -C $(SRC_DIR) clean
	$(MAKE) -C $(TESTS_DIR) clean
	$(MAKE) -C _deps clean
	rm -rf $(BUILD_DIR)

test:
	$(MAKE) -C $(TESTS_DIR) test

# TCK target - compiles and runs all TCK test files with extension support
test_tck: deps
	@mkdir -p $(BUILD_DIR)
	$(MAKE) -C $(SRC_DIR) CFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS)"
	$(MAKE) -C $(TESTS_DIR) tck CFLAGS="$(CFLAGS)" LDFLAGS="$(LDFLAGS)"

rebuild: clean all

# Sanitizer target - rebuild everything with ASAN/UBSAN and extra warnings
sanitize:
	@echo "=== Building with Address Sanitizer and Undefined Behavior Sanitizer ==="
	@echo "CFLAGS will include: -fsanitize=address,undefined -Wall -Wextra -Werror"
	@echo "LDFLAGS will include: -fsanitize=address,undefined"
	@echo "=================================================="
	$(MAKE) clean
	$(MAKE) all SANITIZE=1
